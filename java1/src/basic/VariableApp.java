package basic;

//저장단위 - Bit > Byte > Word > Field(Column) > Record(Row)
//Bit : 0과 1을 저장하기 위한 저장의 최소 단위
//Byte(8Bit) : 영문자 하나를 저장하기 위한 표현의 최소 단위

//자료형(DataType) : 기본값을 표현하기 위한 키워드 또는 특정 대상을 표현하기 위한 식별자
// => 기본값 또는 특정 대상을 저장하기 위한 변수를 선언하기 위해 사용
//1.기본형(PrimitiveType) - 기본값을 표현하기 하기 위한 자료형 - 키워드(8개)
// => 숫자형(정수형, 실수형, 문자형) - 연산 가능, 논리형
//2.참조형(ReferenceType) - 특정 대상을 표현하기 위한 자료형 - 식별자(클래스)
// => String 클래스 : 문자열(문자그룹)을 표현하기 위한 자료형(클래스)

//리터럴(Literal) : 프로그램에서 기본값을 표현하기 위해 사용하는 표현방법
//변수(Variable) : 리터럴(값)을 저장하기 위해 메모리(Memory)에 부여하여 사용하는 이름(식별자)

//변수 선언 - 메모리에 값을 저장하기 위한 공간을 부여하여 이름 제공
//형식)자료형 변수명;
// => 자료형(DataType) : 변수에 저장될 리터럴의 형태를 표현하기 위한 단어 - 기본형(키워드)
// => 변수명 : 리터럴을 저장하기 위한 메모리 공간의 이름 - 식별자

//키워드(Keyword - 예약어) : Java 프로그램을 개발하기 위해 미리 약속되어져 있는 단어
//식별자(Identifier - 사용자 정의 명칭) : Java 프로그램에서 사용하기 위해 개발자가 정의하여 사용하는 단어

//식별자 작성 규칙
// => 영문자, 숫자, 특수문자(_ 또는 $)를 조합하여 작성 - 영문자외에 다른 문자 사용 가능(비권장)
// => 숫자로 시작되도록 작성 불가능
// => 영문자는 대소문자는 구분하여 작성
// => 기존에 사용된 단어(키워드 또는 식별자)로 식별자 선언 불가능

//Java 프로그램에서 사용하기 위한 식별자 표기법 - 영문자 소문자를 기본으로 식별자 작성
//1.파스칼 표기법(PascalCase) : 조합된 단어의 첫문자를 대문자로 표현하여 작성 - 클래스명, 인터페이스명 등
//2.카멜 표기법(CamelCase) : 조합된 단어 중 첫번째 단어를 제외한 나머지 단어의 첫문자를 대문자로 표현하여 작성 - 메소드명, 변수명 등
//3.스네이크 표기법(SnakeCase) : 조합된 단어를 _로 구분하여 작성 - 상수명(Constant - 상수명은 무조건 대문자로 작성) 

public class VariableApp {
	public static void main(String[] args) {
		int su;//정수값을 저장하기 위한 변수 선언 - 메모리에 변수 생성
		//대입연산자(=)를 이용하여 변수에 값을 저장 - 대입연산자 왼쪽에 변수를 위치하여 값을 제공받아 저장 
		su=100;//입력 명령
		System.out.print("초기값 = ");
		System.out.println(su);//변수에 저장된 값을 제공받아 화면에 출력 - 출력 명령
		
		//int su;//동일한 이름의 변수를 재선언할 경우 에러 발생
		su=200;//변수에는 기본값 대신 새로운 값 저장
		System.out.print("변경값 = ");
		System.out.println(su);
		//[Ctrl]+[Alt]+[↑] 또는 [Ctrl]+[Alt]+[↓] : 커서 위치의 행을 복사하여 위 또는 아래 방향으로 붙여넣기 
		//[Alt]+[↑] 또는 [Alt]+[↓] : 커서 위치의 행을 위 또는 아래 방향으로 이동 
		System.out.println("===============================================================");
		int num=100;//변수 선언 및 초기값 저장
		
		//"문자열"+값 또는 값+"문자열" >> 문자열과 값이 결합되어 결과값으로 문자열 제공
		System.out.println("num = "+num);
		System.out.println("===============================================================");
		System.out.println("올해는 "+2+0+2+3+"년입니다.");
		System.out.println(2+0+2+3+"년은 토끼띠입니다.");//잘못된 결과 발생 - 실행 오류
		//"" - 문자가 없는 비어있는 문자열(NullString)
		System.out.println(""+2+0+2+3+"년은 토끼띠입니다.");
		System.out.println("===============================================================");
		//동일한 자료형의 변수는 , 기호를 사용하여 나열 선언 가능
		int num1=100, num2=200;
		System.out.println("연산결과 = "+num1+num2);//잘못된 결과 발생 - 실행 오류
		System.out.println("연산결과 = "+(num1+num2));
		System.out.println("연산결과 = "+num1*num2);
		System.out.println("연산결과 = "+(num1*num2));
		System.out.println("===============================================================");
		
	}
}


















