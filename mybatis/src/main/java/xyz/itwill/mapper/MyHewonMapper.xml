<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyHewonMapper">
	<insert id="insertHewon" parameterType="MyHewon">
		insert into myhewon values(#{id}, #{name}, #{phone}, #{email}, #{status})
	</insert>
	
	<resultMap type="MyHewon" id="myHewonResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_name" property="name"/>
		<result column="hewon_phone" property="phone"/>
		<result column="hewon_email" property="email"/>
		<result column="hewon_status" property="status"/>
	</resultMap>
	
	<select id="selectHewonList" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon order by hewon_id
	</select>
	
	<!-- discriminator : 검색행의 컬럼값을 비교하여 매핑정보를 다르게 제공하기 위한 엘리먼트 -->
	<!-- => 하위 엘리먼트로 case 엘리먼트를 사용하여 검색행의 컬럼값과 비교해 매핑정보 제공 -->
	<!-- javaType 속성 : 검색행의 비교 컬럼값에 대한 Java 자료형을 속성값으로 설정 -->
	<!-- => Java 자료형 대신 typeAlias 엘리먼트로 설정한 별칭(AliasName) 사용 가능 -->
	<!-- column 속성 : 검색행의 비교 컬럼명을 속성값을 설정 -->
	<!-- case : discriminator 엘리먼트로 제공받은 컬럼값과 비교하기 위한 값을 제공하는 엘리먼트 - 1개 이상 -->
	<!-- => 하위 엘리먼트로 매핑정보를 제공하는 엘리먼트(constructor, id, result, association, collection) 사용 -->
	<!-- value 속성 : 비교값을 속성값으로 설정 -->
	<!--  
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<discriminator javaType="int" column="hewon_status">
			<case value="1">
				<id column="hewon_id" property="id"/>
				<result column="hewon_status" property="status"/>
			</case>
			<case value="2">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_status" property="status"/>
			</case>
			<case value="3">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>			
				<result column="hewon_status" property="status"/>
			</case>
			<case value="4">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
				<result column="hewon_status" property="status"/>
			</case>
		</discriminator>
	</resultMap>
	-->
	
	<!-- 모든 case 엘리먼트에 공통적인 매핑정보가 존재할 경우 discriminator 엘리먼트가 아닌
	다른 엘리먼트를 사용하여 매핑 정보 제공 가능 -->
	<!--  
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_status" property="status"/>
		<discriminator javaType="int" column="hewon_status">
			<case value="2">
				<result column="hewon_name" property="name"/>
			</case>
			<case value="3">
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>			
			</case>
			<case value="4">
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
			</case>
		</discriminator>
	</resultMap>
	-->
	
	<resultMap type="MyHewon" id="myHewonOneResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_status" property="status"/>
	</resultMap>
	
	<!-- extends 속성 : resultMap 엘리먼트의 식별자(id 속성값)를 속성값으로 설정 -->
	<!-- => 다른 resultMap 엘리먼트의 매핑정보를 상속받아 사용하기 위한 속성 -->
	<resultMap type="MyHewon" id="myHewonTwoResultMap" extends="myHewonOneResultMap">
		<result column="hewon_name" property="name"/>
	</resultMap>

	<resultMap type="MyHewon" id="myHewonThreeResultMap" extends="myHewonTwoResultMap">
		<result column="hewon_phone" property="phone"/>
	</resultMap>

	<resultMap type="MyHewon" id="myHewonFourResultMap" extends="myHewonThreeResultMap">
		<result column="hewon_email" property="email"/>
	</resultMap>
	
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<discriminator javaType="int" column="hewon_status">
			<case value="1" resultMap="myHewonOneResultMap"/>
			<case value="2" resultMap="myHewonTwoResultMap"/>
			<case value="3" resultMap="myHewonThreeResultMap"/>
			<case value="4" resultMap="myHewonFourResultMap"/>
		</discriminator>
	</resultMap>
	
	<select id="selectDiscriminatorHewonList" resultMap="myHewonDiscriminatorResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon order by hewon_id
	</select>
	
	<!-- 매퍼에 등록된 SQL 명령에 필요한 값을 전달하는 방법 -->
	<!-- => 전달값은 SQL 명령에서 #{변수명|필드명|맵키} 형식으로 표현하여 사용 -->
	<!-- 1.XML 기반의 매퍼 파일에서 SQL 명령이 등록된 엘리먼트의 parameterType 속성값으로
	Java 자료형(별칭)을 설정하여 값을 전달받아 SQL 명령에서 사용 -->
	<!-- => 단일값을 전달받기 위해 parameterType 속성에 원시형(PrimitiveType - Wrapper 클래스)
	또는 String 클래스를 속성값으로 설정 - SQL 명령에서는 #{변수명} 형식으로 전달값 사용 -->
	<!-- => 다수값을 전달받기 위해 parameterType 속성에 DTO 클래스를 속성값으로 설정 
	- SQL 명령에서는 #{필드명} 형식으로 전달값(필드값) 사용 -->
	<!-- => 다수값을 전달받기 위해 parameterType 속성에 HashMap 클래스(Map 인터페이스)를 
	속성값으로 설정 - SQL 명령에서는 #{맵키} 형식으로 전달값(맵값) 사용 -->
	<!-- 2.Interface 기반의 매퍼 파일에서 추상메소드의 매개변수에 @Param 어노테이션을 설정하여
	매개변수에 전달되어 저장된 값을 SQL 명령에서 사용 -->
	<!-- => 매퍼 바인딩한 경우 XML 기반의 매퍼 파일의 엘리먼트에서 SQL 명령을 전달받아 사용 가능 -->
	<!-- => Interface 기반의 매퍼 파일의 추상메소드 매개변수로 전달받은 값을 XML 기반의 매퍼
	파일의 엘리먼트에서 사용할 경우 반드시 parameterType 속성 생략 -->
	
	<!-- 공개범위를 전달받아 MYHEWON 테이블에 저장된 행에서 전달값과 같은 공개범위의 행만 
	검색하여 객체로 제공하는 엘리먼트 -->
	<!-- => 값을 하나만 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 원시형
	(Wrapper 클래스) 또는 String 클래스를 설정하여 값을 SQL 명령에서 #{변수명} 형식으로 사용 -->
	<!-- => 변수명은 어떤 이름을 사용해도 상관 없으며 식별자 작성 규칙에 맞게 작성 -->
	<!--  
	<select id="selectStatusHewonList" parameterType="int" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where hewon_status=#{status} order by hewon_id
	</select>
	-->
	
	<!-- XML 기반의 매퍼 파일의 엘리먼트에서는 parameterType 속성값으로 원시형(Wrapper 클래스) 
	또는 String 클래스를 설정하여 하나의 값을 전달받은 경우 parameterType 속성 생략 가능 -->
	<select id="selectStatusHewonList" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where hewon_status=#{status} order by hewon_id
	</select>
	
	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 행에서 전달값과 같은 이름과 이메일의 
	행을 검색하여 아이디(String 객체 - 문자열)를 제공하는 엘리먼트 -->
	<!-- => 값을 여러개 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 DTO 클래스를
	설정하여 객체를 전달받아 SQL 명령에서 #{필드명} 형식으로 표현하여 필드값 사용 -->
	<select id="selectDTOHewonId" parameterType="MyHewon" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
</mapper>









