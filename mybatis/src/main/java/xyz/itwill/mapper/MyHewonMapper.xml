<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyHewonMapper">
	<insert id="insertHewon" parameterType="MyHewon">
		insert into myhewon values(#{id}, #{name}, #{phone}, #{email}, #{status})
	</insert>
	
	<resultMap type="MyHewon" id="myHewonResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_name" property="name"/>
		<result column="hewon_phone" property="phone"/>
		<result column="hewon_email" property="email"/>
		<result column="hewon_status" property="status"/>
	</resultMap>
	
	<select id="selectHewonList" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon order by hewon_id
	</select>
	
	<!-- discriminator : 검색행의 컬럼값을 비교하여 매핑정보를 다르게 제공하기 위한 엘리먼트 -->
	<!-- => 하위 엘리먼트로 case 엘리먼트를 사용하여 검색행의 컬럼값과 비교해 매핑정보 제공 -->
	<!-- javaType 속성 : 검색행의 비교 컬럼값에 대한 Java 자료형을 속성값으로 설정 -->
	<!-- => Java 자료형 대신 typeAlias 엘리먼트로 설정한 별칭(AliasName) 사용 가능 -->
	<!-- column 속성 : 검색행의 비교 컬럼명을 속성값을 설정 -->
	<!-- case : discriminator 엘리먼트로 제공받은 컬럼값과 비교하기 위한 값을 제공하는 엘리먼트 - 1개 이상 -->
	<!-- => 하위 엘리먼트로 매핑정보를 제공하는 엘리먼트(constructor, id, result, association, collection) 사용 -->
	<!-- value 속성 : 비교값을 속성값으로 설정 -->
	<!--  
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<discriminator javaType="int" column="hewon_status">
			<case value="1">
				<id column="hewon_id" property="id"/>
				<result column="hewon_status" property="status"/>
			</case>
			<case value="2">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_status" property="status"/>
			</case>
			<case value="3">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>			
				<result column="hewon_status" property="status"/>
			</case>
			<case value="4">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
				<result column="hewon_status" property="status"/>
			</case>
		</discriminator>
	</resultMap>
	-->
	
	<!-- 모든 case 엘리먼트에 공통적인 매핑정보가 존재할 경우 discriminator 엘리먼트가 아닌
	다른 엘리먼트를 사용하여 매핑 정보 제공 가능 -->
	<!--  
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_status" property="status"/>
		<discriminator javaType="int" column="hewon_status">
			<case value="2">
				<result column="hewon_name" property="name"/>
			</case>
			<case value="3">
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>			
			</case>
			<case value="4">
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
			</case>
		</discriminator>
	</resultMap>
	-->
	
	<resultMap type="MyHewon" id="myHewonOneResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_status" property="status"/>
	</resultMap>
	
	<!-- extends 속성 : resultMap 엘리먼트의 식별자(id 속성값)를 속성값으로 설정 -->
	<!-- => 다른 resultMap 엘리먼트의 매핑정보를 상속받아 사용하기 위한 속성 -->
	<resultMap type="MyHewon" id="myHewonTwoResultMap" extends="myHewonOneResultMap">
		<result column="hewon_name" property="name"/>
	</resultMap>

	<resultMap type="MyHewon" id="myHewonThreeResultMap" extends="myHewonTwoResultMap">
		<result column="hewon_phone" property="phone"/>
	</resultMap>

	<resultMap type="MyHewon" id="myHewonFourResultMap" extends="myHewonThreeResultMap">
		<result column="hewon_email" property="email"/>
	</resultMap>
	
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<discriminator javaType="int" column="hewon_status">
			<case value="1" resultMap="myHewonOneResultMap"/>
			<case value="2" resultMap="myHewonTwoResultMap"/>
			<case value="3" resultMap="myHewonThreeResultMap"/>
			<case value="4" resultMap="myHewonFourResultMap"/>
		</discriminator>
	</resultMap>
	
	<select id="selectDiscriminatorHewonList" resultMap="myHewonDiscriminatorResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon order by hewon_id
	</select>
	
	<!-- 매퍼에 등록된 SQL 명령에 필요한 값을 전달하는 방법 -->
	<!-- => 전달값은 SQL 명령에서 #{변수명|필드명|맵키} 형식으로 표현하여 사용 -->
	<!-- 1.XML 기반의 매퍼 파일에서 SQL 명령이 등록된 엘리먼트의 parameterType 속성값으로
	Java 자료형(별칭)을 설정하여 값을 전달받아 SQL 명령에서 사용 -->
	<!-- => 단일값을 전달받기 위해 parameterType 속성에 원시형(PrimitiveType - Wrapper 클래스)
	또는 String 클래스를 속성값으로 설정 - SQL 명령에서는 #{변수명} 형식으로 전달값 사용 -->
	<!-- => 다수값을 전달받기 위해 parameterType 속성에 DTO 클래스를 속성값으로 설정 
	- SQL 명령에서는 #{필드명} 형식으로 전달값(필드값) 사용 -->
	<!-- => 다수값을 전달받기 위해 parameterType 속성에 HashMap 클래스(Map 인터페이스)를 
	속성값으로 설정 - SQL 명령에서는 #{맵키} 형식으로 전달값(맵값) 사용 -->
	<!-- 2.Interface 기반의 매퍼 파일에서 추상메소드의 매개변수에 @Param 어노테이션을 설정하여
	매개변수에 전달되어 저장된 값을 SQL 명령에서 사용 -->
	<!-- => 매퍼 바인딩한 경우 XML 기반의 매퍼 파일의 엘리먼트에서 SQL 명령을 전달받아 사용 가능 -->
	<!-- => Interface 기반의 매퍼 파일의 추상메소드 매개변수로 전달받은 값을 XML 기반의 매퍼
	파일의 엘리먼트에서 사용할 경우 반드시 parameterType 속성 생략 -->
	
	<!-- 공개범위를 전달받아 MYHEWON 테이블에 저장된 행에서 전달값과 같은 공개범위의 행만 
	검색하여 객체로 제공하는 엘리먼트 -->
	<!-- => 값을 하나만 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 원시형
	(Wrapper 클래스) 또는 String 클래스를 설정하여 값을 SQL 명령에서 #{변수명} 형식으로 사용 -->
	<!-- => 변수명은 어떤 이름을 사용해도 상관 없으며 식별자 작성 규칙에 맞게 작성 -->
	<!--  
	<select id="selectStatusHewonList" parameterType="int" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where hewon_status=#{status} order by hewon_id
	</select>
	-->
	
	<!-- XML 기반의 매퍼 파일의 엘리먼트에서는 parameterType 속성값으로 원시형(Wrapper 클래스) 
	또는 String 클래스를 설정하여 하나의 값을 전달받은 경우 parameterType 속성 생략 가능 -->
	<select id="selectStatusHewonList" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where hewon_status=#{status} order by hewon_id
	</select>
	
	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 행에서 전달값과 같은 이름과 이메일의 
	행을 검색하여 아이디(String 객체 - 문자열)를 제공하는 엘리먼트 -->
	<!-- => 값을 여러개 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 DTO 클래스를
	설정하여 객체를 전달받아 SQL 명령에서 #{필드명} 형식으로 표현하여 필드값 사용 -->
	<!-- 
	<select id="selectDtoHewonId" parameterType="MyHewon" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	 -->
	
	<!-- 매퍼 바인딩 처리하여 Interface 매퍼 파일과 연결되어 사용될 경우 전달값에 상관없이
	parameterType 속성 생략 가능 --> 
	<select id="selectDtoHewonId" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	
	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 행에서 전달값과 같은 이름과 이메일의 
	행을 검색하여 아이디(String 객체 - 문자열)를 제공하는 엘리먼트 -->
	<!-- => 값을 여러개 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 HashMap 클래스
	(Map 인터페이스)를 설정하여 객체를 전달받아 SQL 명령에서 #{맵키} 형식으로 표현하여 맵값 사용 -->
	<select id="selectMapHewonId" parameterType="map" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	
	<insert id="insertMapHewon" parameterType="map">
		insert into myhewon values(#{id}, #{name}, #{phone}, #{email}, #{status})
	</insert>
	
	<!-- select 엘리먼트의 resultType 속성값을 HashMap 클래스(Map 인터페이스)로 설정하면
	하나의 검색행을 Map 객체로 생성하여 제공 -->
	<!-- => 검색행의 컬럼명은 맵키로 매핑되고 컬럼값은 맵값으로 매핑되어 Map 객체의 엔트리로 추가 -->
	<!-- => 검색행의 컬럼명은 대문자로 검색되어 맵키도 대문자로 매핑 처리 -->
	<select id="selectMapHewonList" resultType="map">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon order by hewon_id
	</select>
	
	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 행에서 전달값과 같은 이름과 이메일의 
	행을 검색하여 아이디(String 객체 - 문자열)를 제공하는 엘리먼트 -->
	<!-- => 매퍼 바인딩을 설정한 경우 Interface 기반의 매퍼 파일에서 추상메소드의 매개변수에
	전달되어 저장된 값을 @Param 어노테이션의 value 속성값으로 제공받아 엘리먼트에 등록된
	SQL 명령에서 #{속성값} 형식으로 표현하여 매개변수의 저장값 사용 -->
	<!-- => parameterType 속성을 반드시 생략 -->
	<select id="selectParamHewonId" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>	
	
	<!-- 검색대상과 검색단어를 전달받아 MYHEWON 테이블에 저장된 행에서 검색대상(컬럼명)에  
	검색단어가 저장된 행을 검색하여 Java 객체로 제공하는 엘리먼트 -->
	<!-- #{변수명|필드명|맵키} : '전달값' - 전달값을 SQL 명령의 문자값으로 사용 -->
	<!-- ${변수명|필드명|맵키} : 전달값 - 전달값을 SQL 명령의 SQL 문장으로 사용 -->
	<!-- => ibatis 프레임워크에서는 $변수명|필드명|맵키$ 형식으로 표현 -->
	<!-- => $표현식은 InSQL 공격에 취약하므로 사용하는 것을 미권장 -->
	<!--  
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where ${searchColumn}=#{searchKeyword} order by hewon_id 
	</select>
	-->
	
	<!-- 검색대상과 검색단어를 전달받아 MYHEWON 테이블에 저장된 행에서 검색대상(컬럼명)에  
	검색단어가 포함된 행을 검색하여 Java 객체로 제공하는 엘리먼트 -->
	<!--  
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where ${searchColumn} like '%'||#{searchKeyword}||'%' order by hewon_id 
	</select>
	-->
	
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		<!-- bind : SQL 명령에서 사용하기 위한 값을 제공하는 엘리먼트 -->
		<!-- => parameterType 속성값으로 전달받은 값을 변경하여 SQL 명령에서 사용할 목적으로 작성 -->
		<!-- => bind 엘리먼트로 제공받은 값은 SQL 명령에서 #{이름} 형식으로 표현하여 사용 -->
		<!-- name 속성 : bind 엘리먼트로 제공받은 값을 SQL 명령에서 사용하기 위한 이름을 속성값으로 설정 -->
		<!-- value 속성 : bind 엘리먼트로 제공될 값을 속성값으로 설정 -->
		<!-- => parameterType 속성값으로 전달받은 값에 문자값을 결합할 경우 + 연산자 사용 -->
		<bind name="keyword" value="'%'+searchKeyword+'%'"/>
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
			from myhewon where ${searchColumn} like #{keyword} order by hewon_id 
	</select>
	
	<!-- 동적 SQL(Dynamic SQL) : 전달값에 따란 엘리먼트에 다른 SQL 명령을 등록하는 기능 -->
	<!-- => OGNL(Object Graph Navigation Language) 표현식을 사용하여 구현 -->
	
	<!-- 이름을 전달받지 못한 경우 MYHEWON 테이블에 저장된 모든 행을 검색하여 검색결과를
	Java 객체로 제공하고 이름을 전달받은 경우 MYHEWON 테이블에 저장된 행에서 해당 이름의
	행만 검색하여 Java 객체로 제공하는 엘리먼트 -->
	<select id="selectDynamicNameHewonList" parameterType="string" resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from myhewon
		<!-- if : 조건에 의해 엘리먼트 내용(SQL 문장)을 포함여부를 설정하는 엘리먼트 -->
		<!-- => if 엘리먼트의 조건이 참인 경우 엘리먼트 내용을 SQL 명령에 포함 -->
		<!-- test 속성 : false(엘리먼트 내용 미포함) 또는 true(엘리먼트 내용 포함) 중 하나를 속성값으로 설정 -->
		<!-- => parameterType 속성값으로 전달받은 값을 이용해 조건식을 작성하여 속성값 제공 -->
		<if test="name != null and name != ''"><!-- 전달값(이름)이 있는 경우 -->
			where hewon_name = #{name}
		</if>
		order by hewon_id
	</select>
</mapper>











