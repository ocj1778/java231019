package inheritance;

//상속관계의 클래스에서 참조변수와 객체와의 관계
public class MemberCastApp {
	public static void main(String[] args) {
		//부모클래스 참조변수=new 부모클래스();//가능
		// => 부모클래스의 생성자로 객체를 생성하여 부모클래스의 참조변수에 저장
		Member member1=new Member();
		
		//참조변수에 저장된 부모 객체를 참조하여 부모클래스의 메소드 호출
		member1.setId("abc123");
		member1.setName("홍길동");
		
		member1.display();
		System.out.println("==============================================================");
		//자식클래스 참조변수=new 자식클래스();//가능
		// => 자식클래스의 생성자를 호출하여 객체를 생성할 경우 부모클래스의 생성자로 부모 
		//객체가 먼저 생성되고 자식클래스의 생성자로 자식 객체를 생성해 자식클래스의 참조변수에
		//자식 객체를 저장  
		MemberEvent member2=new MemberEvent();

		//참조변수에 저장된 자식 객체를 참조하여 자식클래스의 메소드를 호출할 수 있으며 상속
		//관계에 의해 부모 객체를 참조해 부모클래스의 메소드도 호출 가능
		member2.setId("xyz789");
		member2.setName("임꺽정");
		member2.setEmail("xyz@itwill.xyz");
		
		member2.display();
		System.out.println("==============================================================");
		//자식클래스 참조변수=new 부모클래스();//불가능
		// => 자식클래스의 참조변수에는 자식 객체를 저장해야되지만 자식 객체가 없으므로 에러 발생
		//MemberEvent member3=new Member(); 
		System.out.println("==============================================================");
		//부모클래스 참조변수=new 자식클래스();//가능
		// => 자식클래스의 생성자를 호출하여 객체를 생성할 경우 부모클래스의 생성자로 부모 
		//객체가 먼저 생성되고 자식클래스의 생성자로 자식 객체를 생성해 부모클래스의 참조변수에
		//부모 객체를 저장  
		Member member4=new MemberEvent();
		
		//참조변수에 저장된 부모 객체를 참조하여 부모클래스의 메소드만 호출 가능
		member4.setId("opq456");
		member4.setName("전우치");
		
		//객체 형변환을 이용하면 부모클래스의 참조변수를 사용하여 자식 객체를 참조해 자식클래스의
		//메소드 호출 가능
		// => 명시적 객체 형변환(강제 형변환), 묵시적 객체 형변환(자동 형변환)
		// => 상속관계의 클래스에서만 객체 형변환 사용 가능
		
		//명시적 객체 형변환 : Cast 연산자를 사용하여 부모클래스의 참조변수의 자료형을 자식
		//클래스로 변경하여 일시적으로 참조변수가 자식 객체를 참조할 수 있도록 만들어 주는 기능
		// => 명시적 객체 형변환에 의해 자식클래스로 자료형이 변경된 참조변수에는 일시적으로  
		//자식 객체가 저장되어 자식클래스의 메소드 호출 가능
		/*
		MemberEvent event=(MemberEvent)member4;
		event.setEmail("opq@itwill.xyz");
		*/
		
		//Cast 연산자보다 . 연산자가 먼저 처리되므로 Cast 연산자가 먼저 실행해 객체 형변환을
		//해야만 자식 객체를 참조하여 자식클래스의 메소드 호출 가능
		((MemberEvent)member4).setEmail("opq@itwill.xyz");
		
		//((MemberEvent)member4).display();
		//묵시적 객체 형변환 : 부모클래스의 메소드를 자식클래스에서 오버라이드 선언하면 부모
		//클래스의 메소드는 숨겨지므로 자식클래스의 메소드를 호출하기 위해 참조변수의 자료형이
		//자식클래스로 자동 형변경되어 자식 객체를 참조해 자식클래스의 메소드 호출
		member4.display();
		System.out.println("==============================================================");
	}
}
