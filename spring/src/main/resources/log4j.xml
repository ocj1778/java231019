<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
<!-- log4j.xml : 로그 구현체 실행을 위한 정보를 제공하는 환경설정파일 -->
<!-- => 로그 구현체 : 로깅 정보를 제공받아 기록하기 위한 프로그램 -->
	
	<!-- Appenders -->
	<!-- appender : 로그 구현체 관련 정보를 설정하기 위한 엘리먼트 -->
	<!-- name 속성 : appender 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
	<!-- class 속성 : 로그 구현체로 실행하기 위한 클래스를 속성값으로 설정 -->
	<!-- => http://logging.apache.org/log4j/1.2/apidocs 사이트 참조 -->
	<!-- => class 속성값으로 설정될 클래스는 반드시 Appender 인터페이스를 상속받은 클래스로 설정 -->
	<!-- => ConsoleAppender 클래스 : 로깅 정보를 제공받아 콘솔에 기록하기 위한 클래스 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- param : Appender 클래스에 필요한 값을 제공하기 위한 엘리먼트 -->
		<!-- => Appender 클래스에 따른 전달할 이름과 값을 다르게 설정  -->
		<param name="Target" value="System.out" />
		<!-- layout : 로깅 정보를 제공받아 기록하기 위한 형식을 설정하기 위한 엘리먼트 -->
		<!-- class 속성 : 기록을 위한 패턴 관련 정보를 제공하는 클래스를 속성값으로 설정 -->
		<!-- => PatternLayout 클래스 : 변환 문자를 제공받아 사용하기 위한 클래스 -->
		<!-- 변환문자(Conversion Character) - 변환문자는 일반문자와 구분하기 위해 % 기호로 시작 -->
		<!-- => %c : 로그 이벤트가 발생된 카테고리 이름(패키지가 포함된 클래스)을 기록
		 - {정수값}을 이용하여 원하는 형식의 이름으로 기록 가능 -->
		<!-- ex) %c{1} : 패키지를 제외한 클래스의 이름을 기록 -->
		<!-- => %C : 로그 이벤트가 발생된 패키지가 포함된 클래스의 이름을 기록  -->
		<!-- => %d : 로그 이벤트가 발생된 현재 날짜와 시간을 기록 - {SimpleDateFormat}을 사용하는 원하는 형식으로 기록 -->
		<!-- ex) %d{yyyy-MM-dd} : [년-월-일] 형식으로 기록 -->
		<!-- => %m : 로그 이벤트에 의해 전달된 로그 메세지를 기록 -->
		<!-- => %n : 엔터(Enter)를 기록 -->
		<!-- => %M : 로그 이벤트가 발생된 메소드의 이름을 기록 -->
		<!-- => %p : 로깅 정보를 제공한 로그 이벤트를 기록 -->
		<!-- - 로그이벤트 : TRACE >> DEBUG >> INFO >> WARN >> ERROR >> FATAL -->
		<!-- => %t : 로그 이벤트가 발생된 스레드의 이름을 기록 -->
		<!-- => %r : 프로그램 시작 이후부터 로깅 정보를 제공받아 기록되는 시간(ms)을 기록 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!-- ConversionPattern 이름으로 변환 문자을 사용한 패턴 관련 정보를 전달 -->
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- logger : 특정 패키지의 클래스에서 발생되는 로그 이벤트를 기록하기 위한 엘리먼트 -->
	<!-- name 속성 : 로그 이벤트가 발생될 클래스의 패키지를 속성값으로 설정 -->
	<!-- Application Loggers -->
	<logger name="xyz.itwill.spring">
		<!-- level : 클래스에 적용될 로그 이벤트를 설정하기 위한 엘리먼트 -->
		<!-- => root 엘리먼트의 priority 엘리먼트로 제공되는 로그 이벤트 대신 사용되도록 설정 -->
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<!-- root : 모든 클래스에서 발생되는 로그 이벤트를 기록하기 위한 엘리먼트 -->
	<!-- => logger 엘리먼트는 root 엘리먼트의 정보를 상속받아 사용 -->
	<root>
		<!-- priority : 모든 클래스에 우선 적용될 로그 이벤트를 설정하기 위한 엘리먼트 -->
		<!-- value 속성 : 로그 이벤트를 속성값으로 설정 -->
		<!-- => 속성값으로 설정된 로그 이벤트보다 상위 이벤트로 발생된 로깅 정보도 기록 -->
		<priority value="warn" />
		<!-- appender-ref : 사용할 로그 구현체(Appender)를 설정하기 위한 엘리먼트 -->
		<!-- ref 속성 : appender 엘리먼트의 식별자(name 속성값)을 속성값으로 설정 -->
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>










