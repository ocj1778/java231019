<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<!-- web.xml : WAS(Web Application Server) 프로그램이 실행될 때 프로젝트의 파일을 웹자원으로
	변환하기 위한 정보를 제공하는 환경설정파일 -->
	<!-- => Listener 설정, Filter 설정, Servlet 설정, ErrorPage 설정, Welcome File 설정 등 -->

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- context-param : 모든 클래스에게 필요한 값을 제공하는 엘리먼트 -->
	<!-- => contextConfigLocation 이름으로 ContextLoaderListener 클래스의 스프링 컨테이너에게
	Spring Bean Configuration File의 경로를 제공 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- listener : WAS 프로그램이 실행될 때 Listener 클래스를 제공받아 객체로 생성하기 위한 엘리먼트 -->
	<!-- Listener 클래스 : ServletContextListener 인터페이스를 상속받은 자식클래스 -->
	<!-- => contextInitialized 메소드 : Listener 객체 생성 후에 자동으로 호출되는 메소드 - 초기화 작업 -->
	<!-- => contextDestroyed 메소드 : Listener 객체 소멸 전에 자동으로 호출되는 메소드 - 마무리 작업 -->
	<listener>
		<!-- listener-class : WAS 프로그램이 실행될 때 객체로 생성할 Listener 클래스를 설정하는 엘리먼트  -->
		<!-- WAS 프로그램이 실행될 때 ContextLoaderListener 클래스로 객체를 생성하고 자동으로
		contextInitialized 메소드 호출 -->
		<!-- => Spring Bean Configuration File을 제공받아 스프링 컨테이너를 생성 - Root Spring Container -->
		<!-- ContextLoaderListener 클래스에 의해 생성된 스프링 컨테이너(WebApplicationContext 객체)는 
		모든 웹자원(필터 또는 서블릿)에게 Spring Bean(객체) 제공 -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- servlet : 서블릿 클래스를 서블릿으로 등록하기 위한 엘리먼트 -->
	<servlet>
		<!-- servlet-name : 서블릿을 구분하기 위한 식별자를 설정하는 엘리먼트 -->
		<servlet-name>mvc</servlet-name>
		<!-- servlet-class : 서블릿 요청시 객체로 생성될 클래스를 설정하는 엘리먼트 -->
		<servlet-class>xyz.itwill08.mvc.DispatcherServlet</servlet-class>
	</servlet>
	
	<!-- servlet-mapping : 서블릿을 요청하기 위한 URL 주소를 등록하기 위한 엘리먼트 -->
	<servlet-mapping>
		<!-- servlet-name : 요청에 의해 실행될 서블릿의 식별자를 설정하는 엘리먼트 -->
		<servlet-name>mvc</servlet-name>
		<!-- url-pattern : 서블릿을 요청하기 위한 URL 패턴을 설정하는 엘리먼트 -->
		<url-pattern>*.itwill</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>spring</servlet-name>
		<!-- spring-webmvc 라이브러리의 DispatcherServlet 클래스를 Front Controller로 사용 -->
		<!-- => Front Controller 역활의 클래스에서만 사용 가능한 스프링 컨테이너 생성 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- init-param : Servlet 클래스에게 필요한 값을 제공하는 엘리먼트 -->
		<!-- => contextConfigLocation 이름으로 스프링 컨테이너(WebApplicationContext 객체)가 
		읽어 초기화 처리할 수 있는 Spring Bean Configuration File 경로를 제공 -->
		<!-- => Spring Bean Configuration File에 등록된 Spring Bean은 Front Controller 역활의
		클래스에서만 사용 가능하도록 제공 -->
		<!-- => Spring Bean Configuration File은 엔터(Enter) 또는 [,] 및 [;] 기호를 사용하여 여러개 제공 가능 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/spring/mvc-context1.xml
				/WEB-INF/spring/mvc-context2.xml
			</param-value>
		</init-param>
		<!-- load-on-startup : WAS 프로그램이 실행될 때 서블릿 클래스를 객체로 생성하는 기능을 제공하는 엘리먼트 -->
		<!-- => 엘리먼트 내용으로 설정된 정수값이 작을수록 서블릿을 객체로 먼저 생성 -->
		<load-on-startup>0</load-on-startup>
	</servlet>	

	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
