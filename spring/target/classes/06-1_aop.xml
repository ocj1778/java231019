<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 핵심관심모듈의 클래스(DAO 클래스 및 Service 클래스)를 Spring Bean으로 등록 - 의존성 주입 -->
	<bean class="xyz.itwill06.aop.HewonDAOImpl" id="hewonDAO"/>
	<bean class="xyz.itwill06.aop.HewonServiceImpl" id="hewonService">
		<property name="hewonDAO" ref="hewonDAO"/>
	</bean>
	
	<!-- 횡단관심모듈의 클래스(Advice 클래스)를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill06.aop.HewonAdvice" id="hewonAdvice"/>
	
	<!-- Spring AOP(Aspect Oriented Programming - 관점 지향 프로그래밍) : AspectJ 컴파일러에
	의해 프로그램 실행시 핵심관심코드와 횡단관심코드가 결합(Weaving)되어 실행되는 기능 제공 -->
	<!-- => Spring AOP 기능을 사용하기 위해서는 aspectjrt 라이브러리와 aspectjweaver 라이브러리가
	프로젝트에 빌드 처리 - 메이븐 사용 : pom.xml -->
	<!-- Spring AOP을 구현하기 위해 Spring Bean Configuration File(XML) 파일의 엘리먼트를
	사용하여 환경 설정하거나 AOP 관련 어노테이션을 사용하여 설정 -->
	
	<!-- Spring Bean Configuration File(XML) 파일에서 Spring AOP 기능을 구현하기 위해서는
	aop 네임스페이스를 추가하여 spring-aop.xsd 파일의 엘리먼트를 제공받아 설정 -->
	<!-- config : Spring AOP 기능을 구현하기 위한 정보를 제공하는 엘리먼트 -->
	<aop:config>
		<!-- aspect : 핵심관심코드에 횡단관심코드를 원하는 위치에 삽입하여 실해되도록 설정하기 위한 엘리먼트 -->
		<!-- => 횡단관심코드가 삽입될 위치(JoinPoint)를 하위 엘리먼트로 설정 -->
		<!-- => 하위 엘리먼트 : before, after, after-returning, after-throwing, around -->
		<!-- ref 속성 : 횡단관심모듈(Advice 클래스)의 Spring Bean의 식별자(beanName)을 속성값으로 설정 -->
		<!-- => 횡단관심코드의 메소드를 호출할 객체를 제공받아 사용하기 위한 속성 -->
		<aop:aspect ref="hewonAdvice">
			<!-- before : 타겟 메소드의 명령(핵심관심코드) 실행 전 횡단관심코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<!-- method 속성 : 횡단관심모듈(Advice 클래스)의 메소드 이름을 속성값으로 설정 - 자동 완성 기능 사용 -->
			<!-- pointcut 속성 : 핵심관심모듈으로 등록된 Spring Bean의 메소드 중 횡단관심코드가
			삽입될 메소드를 지정하기 위한 PointCut 표현식을 속성값으로 설정 - 타겟 메소드 설정  -->
			<!-- PointCut 표현식 : PointCut 언어를 사용하여 클래스의 메소드를 지정하기 위한 표현방법 -->
			<!-- => PointCut 표현식은 execution 명시자, within 명시자, bean 명시자를 사용하여
			타겟메소드를 지정하며 명시자에 패턴문자와 연산자를 사용하여 설정 가능 -->
			<!-- => PointCut 표현식에서 사용하는 패턴문자 : ..(0개 이상), *(1개 이상), ?(0개 또는 1개) -->
			<!-- => PointCut 표현식에서 사용하는 연산자 : !(Not), &&(And), ||(Or) -->
			
			<!--  -->
			<aop:before method="beforeLog" pointcut=""/>
		</aop:aspect>
	</aop:config>	
</beans>
















